class Solution {
public:
    vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) {
        int row = board.size();
        int col = board[0].size();
        int r = click[0], c = click[1];
        if(board[r][c]=='M'){
          board[r][c]='X';
          return board;
        }
        DFS(board,r,c);
        return board;
    }
    void DFS(vector<vector<char>>& board, int i, int j){
      if(i<0||j<0||i>=board.size()||j>=board[0].size()) return;
      if(board[i][j]=='E'){
        int count = 0;
        for(int k=i-1;k<=i+1;k++)
          for(int l=j-1;l<=j+1;l++){
            if(k==i && l==j)  continue;
            count += getCount(board,k,l);
          }
          if(count>0){
            board[i][j] = count+'0';
          }
          else{
            board[i][j] = 'B';
            for(int k=i-1;k<=i+1;k++)
              for(int l=j-1;l<=j+1;l++){
                if(k==i && l==j)  continue;
                DFS(board,k,l);
              }
          }
      }
    }
    int getCount(vector<vector<char>>& board, int i, int j){
      if(i<0||j<0||i>=board.size()||j>=board[0].size()) return 0;
      if(board[i][j]=='M')  return 1;
      return 0;
    }
};
