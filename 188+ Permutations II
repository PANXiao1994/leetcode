// TLE solution
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> tmp;
        vector<bool> hash(nums.size(),false);
        sort(nums.begin(),nums.end());
        backtracking(nums,tmp,hash,result,0);
        return result;
    }
    void backtracking(vector<int>& nums, vector<int>& v,vector<bool> hash, vector<vector<int>>& r, int start){
      if(v.size()==nums.size()){
        if(find(r.begin(),r.end(),v)==r.end())
          r.push_back(v);
        return;
      }
      for(int i=0;i<nums.size();i++){
        if(!hash[i]){
          //if(i>0 && nums[i]==nums[i-1]) continue;
          v.push_back(nums[i]);
          hash[i]=true;
          backtracking(nums,v,hash,r,0);
          hash[i]=false;
          v.pop_back();
        }
      }
    }
};

// solution 2
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> tmp;
        vector<bool> hash(nums.size(),false);
        sort(nums.begin(),nums.end());
        backtracking(nums,tmp,hash,result,0);
        return result;
    }
    void backtracking(vector<int>& nums, vector<int>& v,vector<bool> hash, vector<vector<int>>& r, int start){
      if(v.size()==nums.size()){
        r.push_back(v);
        return;
      }
      for(int i=0;i<nums.size();i++){
        if(hash[i]) continue;
        if(i>0 && nums[i]==nums[i-1] && !hash[i-1]) continue; // !hash[i-1] is important
        v.push_back(nums[i]);
        hash[i]=true;
        backtracking(nums,v,hash,r,0);
        hash[i]=false;
        v.pop_back();
      }
    }
};

// nums[i]和nums[i-1]中要有一个没访问过的，不然nums[i-1]nums[i]与nums[i]nums[i-1]会重复，
// 加了条件以后，只保留nums[i]nums[i-1]nums[i-2]....这一个
