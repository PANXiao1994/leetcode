class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
      vector<vector<int>> result;
      vector<int> v;
      backtracking(0,nums,v,result);
      return result;
    }
    void backtracking(int start, vector<int>& nums, vector<int>& v, vector<vector<int>>& r){
      if(find(r.begin(),r.end(),v)==r.end()){
        r.push_back(v);
      }
      for(int i=start;i<nums.size();i++){
        v.push_back(nums[i]);
        backtracking(i+1,nums,v,r);
        v.pop_back();
      }
    }
};

//solution 2
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
      vector<vector<int>> result;
      vector<int> v;
      backtracking(0,nums,v,result);
      return result;
    }
    void backtracking(int start, vector<int>& nums, vector<int>& v, vector<vector<int>>& r){
        if(start == nums.size()){ r.push_back(v); return; }
        v.push_back(nums[start]);
        backtracking(start+1,nums,v,r);
        v.pop_back();
        backtracking(start+1,nums,v,r);
    }
};
