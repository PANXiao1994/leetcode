class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount==0) return 0;
        vector<int> dp(amount+1,0);
        sort(coins.begin(),coins.end());
        for(int coin:coins){
          dp[coin] = dp[i]+1;
          if(coin == amount)  return 1;
          if(coin>amount) return -1;
        }
        int index = coins.back();
        while(dp[amount]==0){
          for(int i = 1;i<index;i++)
            if(dp[i]!=0)
              for(int coin:coins){
                dp[i+coin] = dp[i]+1;
                index = i+coin;
                if(index>amount) return -1;
              }
        }
        return dp[amount];
    }
};

//
class Solution {
private:
    unordered_map<int,int> dp;
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount==0) return 0;
        if(dp.find(amount)!=dp.end()) return dp[amount];
        int n = amount + 1;
        for(int coin:coins){
          int curr = 0;
          if(coin <= amount){
            int next = coinChange(coins, amount-coin);
            if(next >= 0)//如果amount-coin可以用coins组成
                curr = 1+next;
          }
          if(curr > 0)
            n = min(n,curr);
        }
        int finalCount = (n==amount+1) ? -1 : n;
        dp.insert(make_pair(amount,finalCount));
        return finalCount;
    }
};
