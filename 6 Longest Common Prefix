//fast solution
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
      string prefix="";
      if(strs.size()==0)
          return prefix;
      char thisletter;
      for(int k = 0;k<strs[0].length();k++){
        thisletter = strs[0][k];
        for(int j = 1;j<strs.size();j++){
          if(strs[j][k]!=thisletter||k>strs[j].length())
            return prefix;
        }
        prefix += thisletter;
      }
      return prefix;
    }
};

// slow solution
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
      string prefix="";
      if(strs.size()==0)
          return prefix;
      int minlength = -1;
      int thislength;
      int minindex;
      for(int i = 0;i<strs.size();i++){
        thislength = strs[i].length();
        if(minlength == -1 || minlength > thislength){
          minlength = thislength;
          minindex = i;  // record the index of the string with the smallest length
        }
      }
      const char *minstr = strs[minindex].c_str();
      char thisletter;
      for(int k = 0;k <minlength;k++){
        thisletter = minstr[k];
        for(int j = 0;j<strs.size();j++){
          if(strs[j][k]!=thisletter)
            return prefix;
        }
        prefix += thisletter;
      }
      return prefix;
    }
};
