class Solution {
public:
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
        vector<pair<int, int>> res;
        if(matrix.empty())  return res;
        vector<vector<int>> strs(matrix.size(),vector<int>(matrix[0].size(),0));
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0;i<m;i++){
          DFS(matrix,strs,INT_MIN,2,i,0,res);
          DFS(matrix,strs,INT_MIN,1,i,n-1,res);
        }
        for(int j=0;j<n;j++){
          DFS(matrix,strs,INT_MIN,2,0,j,res);
          DFS(matrix,strs,INT_MIN,1,m-1,j,res);
        }
        return res;
    }
    void DFS(vector<vector<int>>& matrix, vector<vector<int>>& tmp, int prevalue, int pre, int i, int j, vector<pair<int, int>>& res){
      if(i<0 || j<0 || i==matrix.size()||j==matrix[0].size()
        ||matrix[i][j]<prevalue || (tmp[i][j]&pre) == pre)  return;
      tmp[i][j] |= pre;
      if(tmp[i][j]==3)  res.push_back(make_pair(i,j));
      DFS(matrix,tmp,matrix[i][j],tmp[i][j],i-1,j,res);
      DFS(matrix,tmp,matrix[i][j],tmp[i][j],i+1,j,res);
      DFS(matrix,tmp,matrix[i][j],tmp[i][j],i,j-1,res);
      DFS(matrix,tmp,matrix[i][j],tmp[i][j],i,j+1,res);
    }
};
