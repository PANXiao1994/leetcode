class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> vec;
        vector<bool> tmp(nums.size(),false);
        backtracking(result,vec,tmp,nums,nums.size(),nums.size());
        return result;
    }

    void backtracking(vector<vector<int>>& r,vector<int>& v, vector<bool>& hash, vector<int>& nums, int size,int k){
      if(k==0){  r.push_back(v); return;}
      for(int i=0;i<size;i++){
        if(!hash[i]){
          v.push_back(nums[i]);
          hash[i]=true;
          backtracking(r,v,hash,nums,size,k-1);
          hash[i]=false;
          v.erase(v.end()-1);
        }
      }
    }
};
