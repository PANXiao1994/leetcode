/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)  return{};
        return generateHelper(1,n+1);
    }
    vector<TreeNode*> generateHelper(int start, int end){
      vector<TreeNode*> res;
      if(start==end) {res.push_back(NULL);  return res;}
      for(int i=start;i<end;i++){
        for(auto leach:generateHelper(start,i)){
          for(auto reach:generateHelper(i+1,end)){
            TreeNode* tmp = new TreeNode(i);//这行如果写在循环外面，就会少掉一些结构
            tmp->left = leach;
            tmp->right = reach;
            res.push_back(tmp);
          }
        }
      }
      return res;
    }
};

// wrong answer code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n==0)  return{};
        return generateHelper(1,n+1);
    }
    vector<TreeNode*> generateHelper(int start, int end){
      vector<TreeNode*> res;
      if(start==end-1) {res.push_back(start);  return res;}
      if(start==end)  {res.push_back(NULL);  return res;}
      for(int i=start;i<end;i++){
        TreeNode* tmp = new TreeNode(i);
        for(auto leach:generateHelper(start,i)){
          tmp->left = leach;
          for(auto reach:generateHelper(i+1,end)){
            tmp->right = reach;
            res.push_back(tmp);
          }
        }
      }
      return res;
    }
};

//input :3
//output:[[1,null,3,2],[1,null,3,2],[2,1,3],[3,2,null,1],[3,2,null,1]]
//expected:[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
//因为TreeNode* tmp 在循环外面，所以即使push_back进res，后一个循环依然会改变该指针的值，导致了有重复
