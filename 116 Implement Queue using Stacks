class MyQueue {
private:
  stack<int> s;
public:
    /** Initialize your data structure here. */
    MyQueue() {
    }

    /** Push element x to the back of queue. */
    void push(int x) {
        s.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    int pop() {
      stack<int> s2;
      while(!s.empty()){
        s2.push(s.top());
        s.pop();
      }
      int r = s2.top();
      s2.pop();
      while(!s2.empty()){
        s.push(s2.top());    //Or Instead of 2nd while you can also swap the stack1 and stack2(like swapping two variables)
        s2.pop();
      }
      return r;
    }

    /** Get the front element. */
    int peek() {
      stack<int> s2;
      while(!s.empty()){
        s2.push(s.top());
        s.pop();
      }
      int r = s2.top();
      while(!s2.empty()){
        s.push(s2.top());    //Or Instead of 2nd while you can also swap the stack1 and stack2(like swapping two variables)
        s2.pop();
      }
      return r;
    }

    /** Returns whether the queue is empty. */
    bool empty() {
        return s.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * bool param_4 = obj.empty();
 */
