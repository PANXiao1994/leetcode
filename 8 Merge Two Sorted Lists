//NOTE: Difficult
//another solution : recursive
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode* ln = (l1->val<l2->val)? l1:l2;
        ListNode* current = ln;
        ListNode* tmp = (l1->val<l2->val)? l1->next:l1;
        l2 = (l1->val<l2->val)? l2:l2->next;
        l1 = tmp;
        while(l1&&l2){
            if(l1->val <= l2->val){
              current->next = l1;
              l1 = l1->next;
            }
            else{
              current->next = l2;
              l2 = l2->next;
            }
            current = current->next;
        }
        current->next = l1 ? l1 : l2;
        return ln;
    }
};
