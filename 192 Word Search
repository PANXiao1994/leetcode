class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row = board.size();
        int col = board[0].size();
        bool flag = false;
        vector<vector<bool>> hash(row,vector<bool>(col,false));
        for(int i=0;i<row;i++){
          for(int j=0;j<col;j++)
              if(backtracking(word,hash,board,0,i,j,row,col))   return true;
        }
        return false;
    }
    bool backtracking(string word, vector<vector<bool>>& hash, vector<vector<char>>& board, int k, int i, int j, int row, int col){
      if(k==word.length())  return true;
      if(i<0 || j<0 || i==row || j==col)    return false;
      if(hash[i][j])    return false;
      if(word[k]!=board[i][j])  return  false;
      hash[i][j] = true;
      bool fg = backtracking(word,hash,board,k+1,i-1,j,row,col)
          ||backtracking(word,hash,board,k+1,i,j-1,row,col)
          ||backtracking(word,hash,board,k+1,i+1,j,row,col)
          ||backtracking(word,hash,board,k+1,i,j+1,row,col);
      hash[i][j] = false;
      return fg;
    }
};
