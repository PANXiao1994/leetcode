/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
      if(!head || !head->next) return true;
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* rev =head;
        ListNode* prev = NULL;
      while(fast && fast->next){
        fast = fast->next->next;
        rev = slow;
        slow = slow->next;
        rev->next = prev;
        prev = rev;

      } // 'rev' is always one step behind 'slow'
      if(fast) // if the link has odd number of nodes
        slow = slow->next;
      while(rev && slow->val == rev->val){
        slow = slow->next;
        rev = rev->next;
      }
      if(rev)
        return false;
      return true;
    }
};
