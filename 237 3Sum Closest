//solution 1
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int result = INT_MAX;
        int tgt = nums[0]+nums[1]+nums[2]-target;
        for(int i=0;i<n-2;i++){
          int j = i+1, k = n-1;
          while(j<k){
            int tmp = nums[i]+nums[j]+nums[k]-target;
            if(abs(tmp)<abs(tgt)){
              tgt = tmp;
              if(abs(nums[i]+nums[j+1]+nums[k]-target) >= abs(nums[i]+nums[j]+nums[k-1]-target))
                k--;
              else  j++;
            }
            else if(tmp>=abs(tgt))  k--;
            else if(tmp<=-abs(tgt)) j++;
          }
          result = abs(result)<=abs(tgt)? result:tgt;
        }
        return result+target;
    }
};

//solution 2
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int res = nums[0]+nums[1]+nums[2];
        for(int i=0;i<n-2;i++){
          int j = i+1, k = n-1;
          while(j<k){
            int tmp = nums[i]+nums[j]+nums[k];
            if(abs(tmp-target)<abs(res-target)){
              res = tmp;
              if(res==target) return target;
            }
            (tmp>target)? k--:j++;
          }
        }
        return res;
    }
};

//solution 3
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int res = nums[0]+nums[1]+nums[2];
        for(int i=0;i<n-2;i++){
          int j = i+1, k = n-1;
          while(j<k){
            int tmp = nums[i]+nums[j]+nums[k];
            if(abs(tmp-target)<abs(res-target))   {res = tmp; if(tmp==0)  return target;}
            while(j<k&&nums[i]+nums[j]+nums[k]>=abs(res-target))  k--;
            while(j<k&&nums[i]+nums[j]+nums[k]<=-abs(res-target)) j++;
          }
        }
        return res;
    }
};
//ä¼˜åŒ– solution 3
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int res = nums[0]+nums[1]+nums[2];
        for(int i=0;i<n-2;i++){
          int j = i+1, k = n-1;
          while(j<k){
            int tmp = nums[i]+nums[j]+nums[k];
            if(abs(tmp-target)<abs(res-target))   {res = tmp; if(tmp==target)  return target;}
            while(j<k&&nums[i]+nums[j]+nums[k]-target>=abs(res-target))  k--;
            while(j<k&&nums[i]+nums[j]+nums[k]-target<=-abs(res-target)) j++;
          }
        }
        return res;
    }
};
